import 'package:flutter/material.dart';
import './bloc/air-bloc.dart';
import './model/air-result.dart';

final airBloc = AirBloc();

class FineDust extends StatefulWidget {
  static const routeName = '/fine-dust';

  @override
  _FineDustState createState() => _FineDustState();
}

class _FineDustState extends State<FineDust> {
  Color getColor(Autogenerated result) {
    if (result.data.current.pollution.aqius <= 50) {
      return Colors.greenAccent;
    } else if (result.data.current.pollution.aqius <= 100) {
      return Colors.yellow;
    } else if (result.data.current.pollution.aqius <= 150) {
      return Colors.orange;
    } else {
      return Colors.red;
    }
  }

  String getString(Autogenerated result) {
    if (result.data.current.pollution.aqius <= 50) {
      return 'Good';
    } else if (result.data.current.pollution.aqius <= 100) {
      return 'Normal';
    } else if (result.data.current.pollution.aqius <= 150) {
      return 'Not Good';
    } else {
      return 'Bad';
    }
  }

  Widget _buildBody(Autogenerated result) {
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Fine Dust Measuer API',
              style: TextStyle(
                fontSize: 25.0,
              ),
            ),
            const SizedBox(height: 16.0),
            Card(
              elevation: 4.0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
              child: Column(
                children: <Widget>[
                  Container(
                    padding: const EdgeInsets.all(8.0),
                    color: getColor(result),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: <Widget>[
                        Text(
                          'Aqius: ${result.data.current.pollution.aqius}',
                          style: TextStyle(fontSize: 40.0),
                        ),
                        Text(getString(result),
                            style: TextStyle(fontSize: 20.0)),
                      ],
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: <Widget>[
                        Row(
                          children: <Widget>[
                            // Image.network(
                            //   'https://airvisual.com/images/${result.data.current.weather.ic}.png',
                            //   width: 25.0,
                            //   height: 25.0,
                            // ),
                            const SizedBox(width: 16.0),
                            Text(
                              'Tp: ${result.data.current.weather.tp}â„ƒ',
                              style: TextStyle(fontSize: 16.0),
                            ),
                          ],
                        ),
                        Text(
                          'Hu: ${result.data.current.weather.hu}',
                        ),
                        Text(
                          'WS: ${result.data.current.weather.ws}',
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 16.0),
            Text('${result.dateTime}'),
            const SizedBox(height: 16.0),
            RaisedButton(
              onPressed: () {
                airBloc.streamToSubject();
              },
              color: Colors.orange,
              child: Icon(
                Icons.refresh,
                color: Colors.white,
              ),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(25),
              ),
            ),
            const SizedBox(height: 16.0),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: StreamBuilder(
        stream: airBloc.airBlocStream,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return CircularProgressIndicator();
          } else {
            if (snapshot.hasData) {
              return _buildBody(snapshot.data);
            } else {
              return Text('Error Occured');
            }
          }
        },
      ),
    );
  }
}
